import os
import subprocess
from datetime import datetime

import streamlit as st
from sqlalchemy import create_engine, text
from graphviz import Digraph

from config import get_cfg

# -----------------------------------------------------------------------------
# Metadata for each microâ€‘service that fetches nonâ€‘price metrics
# -----------------------------------------------------------------------------
SERVICES = {
    "onchain_service": {
        "label": "Onâ€‘chain flows (Glassnode)",
        "script": "data_services/onchain_service/flow.py",
        "metrics": ["exchange_net_position_change"],
    },
    "deriv_service": {
        "label": "Derivatives (Coinglass)",
        "script": "data_services/deriv_service/funding.py",
        "metrics": ["funding_rate"],
    },
    "social_service": {
        "label": "Social Sentiment (LunarCrush)",
        "script": "data_services/social_service/fetch.py",
        "metrics": ["social_volume", "social_sentiment"],
    },
    "dev_activity_service": {
        "label": "Dev Activity (Santiment)",
        "script": "data_services/dev_activity_service/dev.py",
        "metrics": ["dev_activity_1d"],
    },
    "macro_service": {
        "label": "Macro (Fear & Greed, DXY)",
        "script": "data_services/macro_service/fear_greed.py",
        "metrics": ["fng_index"],
    },
    "smart_money_service": {
        "label": "Smart Money (Nansen)",
        "script": "data_services/smart_money_service/whale.py",
        "metrics": ["whale_flow"],
    },
}

# -----------------------------------------------------------------------------
# Streamlit page configuration
# -----------------------------------------------------------------------------
st.set_page_config(page_title="Data Console", layout="wide")

st.title("ðŸ”Œ Data Console â€” Crypto Strategy Engine")

# Tabs: Console (run services, manage keys) & Architecture
console_tab, arch_tab = st.tabs(["Console", "Architecture"])

# -----------------------------------------------------------------------------
# Console tab implementation
# -----------------------------------------------------------------------------
with console_tab:
    st.header("API keys")
    with st.expander("Manage secrets", expanded=False):
        for svc in SERVICES:
            key_name = f"{svc.upper()}_KEY"
            key_val = st.text_input(key_name, value=os.getenv(key_name, ""), type="password")
            if key_val:
                st.session_state[key_name] = key_val  # stored only for current session
                st.success(f"{key_name} stored in session")
        st.info("Keys are kept in Streamlit `st.session_state`. Persist them via Streamlit Cloud Secrets.")

    st.divider()

    st.header("Service status")
    # database connection
    engine = create_engine(get_cfg("SUPABASE_CONN"))

    status_rows = []
    with engine.connect() as conn:
        for svc, meta in SERVICES.items():
            metrics_clause = ", ".join([f"'{m}'" for m in meta["metrics"]])
            sql = text(
                f"""
                SELECT MAX(ts) AS last_run
                FROM metric_raw
                WHERE metric IN ({metrics_clause})
                """
            )
            last_run = conn.execute(sql).scalar()
            status_rows.append(
                {
                    "Service": meta["label"],
                    "Last run": last_run or "â€”",
                    "Script": meta["script"],
                }
            )
    st.dataframe(status_rows, hide_index=True)

    st.divider()

    st.header("Run microâ€‘service on demand")
    cols = st.columns(len(SERVICES))
    for i, (svc, meta) in enumerate(SERVICES.items()):
        if cols[i].button(meta["label"]):
            with st.spinner(f"Running {meta['label']}â€¦"):
                result = subprocess.run(["python", meta["script"]], capture_output=True, text=True)
                if result.returncode == 0:
                    st.success("Completed successfully")
                else:
                    st.error(f"Error: {result.stderr[:300]}")

# -----------------------------------------------------------------------------
# Architecture tab implementation
# -----------------------------------------------------------------------------
with arch_tab:
    st.header("Dataâ€‘flow diagram")
    dot = Digraph("CSE", format="png")
    dot.node("price", "OHLCV\nfetcher_service")
    for svc in SERVICES:
        dot.node(svc, SERVICES[svc]["label"])
    dot.node("db", "Supabase\n(metric_raw, price_ohlcv)")
    dot.node("flab", "feature_lab")
    dot.node("strategies", "strategy_service")
    dot.node("agent", "agent_service")

    dot.edge("price", "db")
    for svc in SERVICES:
        dot.edge(svc, "db")
    dot.edge("db", "flab")
    dot.edge("flab", "strategies")
    dot.edge("flab", "agent")

    st.graphviz_chart(dot, use_container_width=True)

    st.caption(
        "Questo schema mostra lâ€™attuale pipeline. "
        "Aggiungi un nuovo microâ€‘servizio compilando il dizionario `SERVICES`."
    )

# -----------------------------------------------------------------------------
# Footer refresh timestamp
# -----------------------------------------------------------------------------
st.sidebar.success(
    f"Last refresh: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
)
